<style lang="scss">
.toolbar {

    height: 120rpx;
    width: 100%;
    background-color: white;

    box-sizing: border-box;
    padding: 24rpx 30rpx;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.11);

    display: flex;
    flex-flow: row nowrap;
    align-items: center;

    .wrap {
        flex: 1;
        height: 100%;
        background-color: #e5e5e5;
        border: 1px solid #e5e5e5;
        border-radius: 8rpx;
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        box-sizing: border-box;
        padding: 0 30rpx;

        transition: background-color 0.1s;

        input {
            flex: 1;
            font-size: 14px;
            width: 100%;
        }

        image {
            margin-right: 16rpx;
            width: 40rpx;
            height: 40rpx;
        }
    }

    .btn {

        box-sizing: border-box;

        height: 100%;
        display: flex;
        flex-flow: row nowrap;
        justify-content: center;
        align-items: center;

        color: #D30A0A;
        font-size: 16px;
        border-radius: 8rpx;
        border: 1px solid #D30A0A;

        margin-left: 24rpx;
        width: 110rpx;

        transition: color 0.1s, background-color 0.1s;

        &:active {
            background-color: #D30A0A;
            color: white;
        }
    }
}


.main {

    flex: 1;
    box-sizing: border-box;
    overflow: auto;

    position: relative;

    padding: 40rpx 0;

    .sec {

        background-color: white;

        box-sizing: border-box;
        padding: 0 30rpx;

        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        align-items: center;

        width: 100%;

        &:not(:last-child) {
            border-bottom: 1px solid #e5e5e5;
        }

        .row {

            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;

            height: 120rpx;

            font-size: 18px;
            color: black;

            &:not(:last-child) {
                border-bottom: 1px solid #e5e5e5;
            }
        }
    }

    .shopname {
        color: #4a4a4a;
        font-size: 15px;
        height: 100rpx;
    }

    .action {
        color: black;
        font-size: 18px;
        height: 120rpx;
    }
}
</style>
<template>
    <view class="container">
        <view class="toolbar">
            <view class="wrap {{searchInputFocused ? 'active' : ''}}" style="{{searchInputFocused ? 'background-color: white;' : ''}}">
                <image src="{{searchInputFocused ? searchIconUrl : searchGreyIconUrl}}" />
                <input placeholder="请输入收银员名字" bindfocus="handleSearchInputFocus" bindblur="handleSearchInputBlur" @input="handleSearchInputChange" />
            </view>
            <view class="btn" @tap="handleSubmitSelected">
                确定
            </view>
        </view>
        <view class="main">
            <view class="sec action" @tap="handleChangeSelectAll">
                全部员工
                <icon type="success" wx:if="{{selectAll}}" />
            </view>

            <view class="sec shopname">
                {{branch_name}}
            </view>

            <view class="sec">
                <repeat for="{{cashiers}}">

                    <view class="row" @tap="handleChangeSelectItem({{index}})">
                        {{item.name}}
                        <icon type="success" wx:if="{{selectAll || item.checked}}" />
                    </view>

                </repeat>
            </view>

        </view>
    </view>
</template>

<script>
import wepy from 'wepy';

import EventBus from '../../eventbus/eventbus';

import * as branchApi from '../../network/api/branch';

export default class ManagerSwitch extends wepy.page {

    config = {
        navigationBarTitleText: '选择收银员',
        disableScroll: true
    }
    components = {


    }

    data = {
        searchIconUrl: '../../assets/imgs/icon_search.png',
        searchGreyIconUrl: '../../assets/imgs/icon_search_grey.png',
        searchInputFocused: false,

        selectAll: false,
        cashiers: [
        ],
        _cashiers: [],
        branch_id: null,
        branch_name: null,

    }

    computed = {

    }

    checkIfSelectAll() {

        for (let i = 0; i < this.cashiers.length; i++) {

            if (!this.cashiers[i].checked) {
                return false;
            }

        }

        return true;


    }

    methods = {
        handleSearchInputFocus(e) {
            this.searchInputFocused = true;
        },
        handleSearchInputBlur(e) {
            this.searchInputFocused = false;

        },

        handleChangeSelectAll(e) {

            let ctx = this;

            ctx.selectAll = !ctx.selectAll;

            ctx.cashiers.forEach(cashier => {
                cashier.checked = ctx.selectAll;
            });


        },

        handleChangeSelectItem(index) {

            this.cashiers[index].checked = !this.cashiers[index].checked;

            this.selectAll = this.checkIfSelectAll();

        },
        handleSubmitSelected(e) {

            let ctx = this;

            let res = [];

            for (let cashier of ctx.cashiers) {
                if (cashier.checked) {
                    res.push(cashier.id);
                }

            }

            if (res.length < 1) {

                wepy.showModal({
                    title: '提示',
                    content: '请选择收银员',
                    showCancel: false
                });

                return;
            }

            EventBus.emit('manager_bill-setcashiers', {
                cashiers: res,
                selectAll: ctx.selectAll
            });
            wepy.navigateBack({
                delta: 1
            });


        },
        handleSearchInputChange(e) {

            let ctx = this;

            ctx.cashiers = ctx._cashiers.filter(cashier => cashier.name.indexOf(e.detail.value) > -1);

        }


    }

    events = {

    }

    async loadCashiers() {

        let ctx = this;

        let res = null;

        wepy.showLoading({
            title: '获取中',
            mask: true
        });

        try {
            res = await branchApi.getInfo(ctx.$parent.globalData.token, ctx.branch_id);
        } catch (err) {
            wepy.showModal({
                title: '获取失败',
                content: err,
                showCancel: false
            });
            return;

        } finally {
            wepy.hideLoading();
        }

        let temp = res.branch.staffs.filter(cashier => cashier.user_type == 2);

        let deletedCashiers = temp.filter(cashier => cashier.account_status !== 0);
        let normalCashiers = temp.filter(cashier => cashier.account_status === 0);

        let finalCashiers = [
            ...normalCashiers,
            ...deletedCashiers
        ];

        ctx._cashiers = finalCashiers.map(cashier => ({
            checked: false,
            name: cashier.account_status === 0 ? cashier.nickname : cashier.nickname + '(已删除)',
            id: cashier.id
        }));

        ctx.$apply();

        ctx.cashiers = ctx._cashiers.filter(() => true);

        ctx.$apply();

    }

    onLoad() {

        let ctx = this;

        for (let key in ctx.$wxpage.options) {
            ctx[key] = ctx.$wxpage.options[key];
        }

        ctx.loadCashiers();

    }
}
</script>
