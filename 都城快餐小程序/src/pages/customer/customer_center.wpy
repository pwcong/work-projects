<style lang="scss">
.main {
  height: 100%;
  width: 100%;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  overflow: auto;
  padding: 40rpx 0 80rpx 0;
  .row {
    width: 100%;
    background-color: white;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    padding: 0 35rpx;
  }
  .row-1 {
    height: 100rpx;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row nowrap;
    flex-flow: row nowrap;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    font-size: 17px;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    border-bottom: 1px solid #e5e5e5;
    image {
      width: 40rpx;
      height: 40rpx;
      margin-right: 22rpx;
    }
  }
  .row-2 {
    height: 128rpx;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    padding: 10rpx 35rpx;
    font-size: 16px;
    .row-2-wrap {
      height: 100%;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-flow: row nowrap;
      flex-flow: row nowrap;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between;
      border-bottom: 1px solid #e5e5e5;
      input {
        text-align: right;
      }
      .radio {
        position: relative;
        font-size: 16px;
        radio {
          opacity: 0;
        }
        image {
          position: relative;
          left: 15%;
          top: 8rpx;
          width: 40rpx;
          height: 40rpx;
        }
      }
    }
  }
  .btn-submit {
    padding: 40rpx 0;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
    background-color: white;
    view {
      margin: 0 auto;
      width: 360rpx;
      height: 70rpx;
      border: 1px solid #d30a0a;
      border-radius: 8rpx;
      line-height: 70rpx;
      text-align: center;
      color: #d30a0a;
      -webkit-transition: background-color 0.1s, color 0.1s;
      transition: background-color 0.1s, color 0.1s;
      &:active {
        color: white;
        background-color: #d30a0a;
      }
    }
  }
  .btn-logout {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    margin-top: 86rpx;
    padding: 0 30rpx;
    view {
      border-radius: 8rpx;
      width: 100%;
      height: 92rpx;
      color: white;
      background-color: #d30a0a;
      font-size: 18px;
      -webkit-transition: background-color 0.1s, color 0.1s;
      transition: background-color 0.1s, color 0.1s;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-flow: row nowrap;
      flex-flow: row nowrap;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      &:active {
        color: white;
        background-color: #a20909;
      }
    }
  }
}
</style>
<template>
  <view class="container">

    <view class="main">

      <view class="row row-1">
        <image src="{{peopleIconUrl}}" /> 基本信息
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          账号
          <text style="color: #8b8b8b;">{{userInfo.username}}</text>
        </view>
      </view>
      <view class="row row-2" @tap="handleTimeoutClick">
        <view class="row-2-wrap">
          账户有效期
          <text style="color: #8b8b8b;">{{userInfo.timeout}}</text>
        </view>
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          昵称
          <input value="{{userInfo.nickName}}" @input="handleNickNameChange" />
        </view>
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          生日
          <picker mode="date" value="1990-01-01" bindchange="handleBirthdayChange">
            <text>{{ userInfo.birthday || '请选择日期'}}</text>
          </picker>
        </view>
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          性别
          <radio-group bindchange="handleSexChange">
            <label class="radio">
              <image src="{{userInfo.sex == 1 ? optionDoneIconUrl : optionPreIconUrl}}" />
              <radio value="1" checked="{{userInfo.sex == 1}}" />男
            </label>
            <label class="radio">
              <image src="{{userInfo.sex == 2 ? optionDoneIconUrl : optionPreIconUrl}}" />
              <radio value="2" checked="{{userInfo.sex == 2}}" />女
            </label>
          </radio-group>
        </view>
      </view>
      <view class="row row-2" style="margin-bottom: 40rpx;">
        <view class="row-2-wrap">
          邮箱
          <input value="{{userInfo.email}}" placeholder="请输入邮箱" @input="handleEmailChange" />
        </view>
      </view>

      <view class="row row-1">
        <image src="{{lockIconUrl}}" /> 修改密码
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          原始密码
          <input placeholder="请输入原始密码" password="true" @input="handleOldPasswordChange" />
        </view>
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          新密码
          <input placeholder="请输入新密码" password="true" @input="handleNewPasswordChange" />
        </view>
      </view>
      <view class="row row-2">
        <view class="row-2-wrap">
          重复新密码
          <input placeholder="请再次输入新密码" password="true" @input="handleNewCheckPasswordChange" />
        </view>

      </view>

      <view class="btn-submit" @tap="handleSubmitButtonClick">
        <view>
          确认
        </view>
      </view>

      <view class="btn-logout">
        <view @tap="handleLogoutButtonClick">
          <image src="{{quitIconUrl}}" style="width: 40rpx; height: 40rpx; margin-right: 30rpx;" /> 退出登录
        </view>
      </view>

    </view>

  </view>
</template>

<script>
import wepy from 'wepy';

import * as userApi from '../../network/api/user';

export default class CustomerCenter extends wepy.page {
  config = {
    navigationBarTitleText: '个人中心',
    disableScroll: true
  };
  components = {};

  data = {
    userInfoChanged: false,
    userInfo: {
      nickName: '',
      birthday: '',
      sex: 0,
      email: '',
      username: '',
      timeout: '',
      timeoutType: -1
    },

    oldPassword: '',
    newPassword: '',
    newCheckPassword: '',

    peopleIconUrl: '../../assets/imgs/icon_people_fill.png',
    lockIconUrl: '../../assets/imgs/icon_lock_fill.png',
    quitIconUrl: '../../assets/imgs/icon_quit.png',
    optionPreIconUrl: '../../assets/imgs/option_pre.png',
    optionDoneIconUrl: '../../assets/imgs/option_done.png',

    msg: ''
  };

  computed = {};

  methods = {
    async handleSubmitButtonClick() {
      let ctx = this;

      // 修改个人信息
      if (ctx.userInfoChanged) {
        let res = null;

        wepy.showLoading({
          title: '提交中',
          mask: true
        });

        try {
          res = await userApi.modifyInfo(
            wepy.getStorageSync('token'),
            null,
            ctx.userInfo.nickName,
            parseInt(ctx.userInfo.sex),
            null,
            ctx.userInfo.birthday,
            ctx.userInfo.email
          );
        } catch (err) {
          wepy.navigateTo({
            url: '../msg?type=warn&msg=修改失败&delta=1'
          });
          return;
        } finally {
          wepy.hideLoading();
        }

        ctx.userInfoChanged = false;

        ctx.setUserInfo(res.user);
      }

      if (ctx.oldPassword || ctx.newPassword || ctx.newCheckPassword) {
        if (!ctx.oldPassword || !ctx.newPassword || !ctx.newCheckPassword) {
          wepy.showModal({
            title: '请输入原始密码和新密码',
            confirmColor: '#d30a0a',
            showCancel: false
          });
          return;
        }

        if (ctx.newPassword != ctx.newCheckPassword) {
          wepy.showModal({
            title: '两次密码输入不一致',
            confirmColor: '#d30a0a',
            showCancel: false
          });
          return;
        }

        let res = null;

        wepy.showLoading({
          title: '提交中',
          mask: true
        });

        try {
          res = await userApi.modifyPassword(
            wepy.getStorageSync('token'),
            null,
            ctx.oldPassword,
            ctx.newPassword
          );
        } catch (err) {
          wepy.navigateTo({
            url: '../msg?type=warn&msg=修改失败&delta=1'
          });
          return;
        } finally {
          wepy.hideLoading();
        }

        // wepy.navigateTo({
        //   url: `../msg?type=success&msg=修改成功&delta=-1`
        // });

        ctx.$parent.clearLoginStat();

        wepy.reLaunch({
          url: '../index?msg=修改成功！请重新登录。'
        });

        return;
      }

      wepy.navigateTo({
        url: `../msg?type=success&msg=修改成功&delta=1`
      });
    },
    handleLogoutButtonClick() {
      let ctx = this;
      ctx.$parent.clearLoginStat();

      wepy.reLaunch({
        url: '../index'
      });
    },
    handleSexChange(e) {
      this.userInfoChanged = true;
      this.userInfo.sex = e.detail.value;
    },
    handleBirthdayChange(e) {
      this.userInfoChanged = true;
      this.userInfo.birthday = e.detail.value;
    },

    handleNickNameChange(e) {
      this.userInfoChanged = true;
      this.userInfo.nickName = e.detail.value;
    },

    handleEmailChange(e) {
      this.userInfoChanged = true;
      this.userInfo.email = e.detail.value;
    },
    handleOldPasswordChange(e) {
      this.oldPassword = e.detail.value;
    },
    handleNewPasswordChange(e) {
      this.newPassword = e.detail.value;
    },
    handleNewCheckPasswordChange(e) {
      this.newCheckPassword = e.detail.value;
    },
    handleTimeoutClick(e) {
      if (this.userInfo.timeoutType > -1) {
        let msg = null;
        switch (this.userInfo.timeoutType) {
          case 0:
            msg = '距上一次充值180天后，账户将会被暂时冻结，冻结状态下无法消费，充值任意金额即可解除冻结。';
            break;
          case 1:
            msg = '未进行过充值操作，账户将会被暂时冻结，冻结状态下无法消费，充值任意金额即可解除冻结。';
            break;
          default:
            break;
        }

        wepy.showModal({
          title: '提示',
          content: msg,
          confirmColor: '#d30a0a',
          showCancel: false
        });
      } else {
        wepy.showModal({
          title: '提示',
          content: '未进行过充值操作或距上一次充值180天后，账户将会被暂时冻结，冻结状态下无法消费，充值任意金额即可解除冻结。当受赠金额时，有效期与转赠人同步。',
          confirmColor: '#d30a0a',
          showCancel: false
        });
      }
    }
  };

  events = {};

  setUserInfo(userInfo) {
    let ctx = this;

    ctx.userInfo.nickName = userInfo.nickname;
    ctx.userInfo.birthday = userInfo.birthday;
    ctx.userInfo.sex = userInfo.gender;
    ctx.userInfo.email = userInfo.email_address;
    ctx.userInfo.username = userInfo.username;

    if (!userInfo.last_topup_time) {
      ctx.userInfo.timeout = '该账户已冻结';
      ctx.userInfo.timeoutType = 0;
    } else {
      let t = new Date() - new Date(userInfo.last_topup_time.replace(/\-/g, '/'));
      if (t > 15552000000) {
        ctx.userInfo.timeout = '该账户已冻结';
        ctx.userInfo.timeoutType = 1;
      } else {
        ctx.userInfo.timeout = parseInt((15552000000 - t) / 86400000) + '天';
      }
    }

    ctx.$apply();
  }

  async loadUserInfo() {
    let ctx = this;

    wepy.showLoading({
      title: '获取中',
      mask: true
    });

    let res = null;

    try {
      res = await userApi.getInfo(wepy.getStorageSync('token'));
    } catch (err) {
      wepy.showModal({
        title: '获取失败',
        content: err,
        confirmColor: '#d30a0a',
        showCancel: false
      });
      return;
    } finally {
      wepy.hideLoading();
    }

    ctx.setUserInfo(res.user);
  }

  onReady() {
    let ctx = this;

    if (ctx.msg) {
      wepy.showModal({
        title: '提示',
        content: ctx.msg,
        confirmColor: '#d30a0a',
        showCancel: false
      });
    }
  }

  onLoad() {
    let ctx = this;

    for (let key in ctx.$wxpage.options) {
      ctx[key] = ctx.$wxpage.options[key];
    }

    ctx.loadUserInfo();
  }
}
</script>
